// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Redi.Infrastructure.Persistence.EfCore;

#nullable disable

namespace Redi.Infrastructure.Persistence.EfCore.Migrations
{
    [DbContext(typeof(RediDbContext))]
    [Migration("20230720203704_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Redi.Domain.Aggregates.ContainerAggregate.Container", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("LocalStake")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Stake")
                        .HasColumnType("decimal(18,2)");

                    b.Property<ushort>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Container", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a19be63f-a056-4ce1-bf27-05000a798bcd"),
                            LocalStake = 1m,
                            Name = "ROOT",
                            Stake = 1m,
                            Weight = 1
                        });
                });

            modelBuilder.Entity("Redi.Domain.Aggregates.ContainerAggregate.Entities.StakerMembership", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContainerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("LocalStake")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Stake")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("StakerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<ushort>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("StakerId");

                    b.ToTable("StakerMembership", (string)null);
                });

            modelBuilder.Entity("Redi.Domain.Aggregates.ProfitLedgerAggregate.Entities.DailyCompanyProfitEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<decimal>("Profit")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("DailyCompanyProfitEntry", (string)null);
                });

            modelBuilder.Entity("Redi.Domain.Aggregates.ProfitLedgerAggregate.Entities.DailyStakerProfitEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<decimal>("Profit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Stake")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("StakerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.ToTable("DailyStakerProfitEntry", (string)null);
                });

            modelBuilder.Entity("Redi.Domain.Aggregates.StakerAggregate.Staker", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Staker", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6850c5a3-361a-4f73-98fa-6eab45a00674")
                        });
                });

            modelBuilder.Entity("Redi.Domain.Aggregates.ContainerAggregate.Container", b =>
                {
                    b.HasOne("Redi.Domain.Aggregates.ContainerAggregate.Container", "Parent")
                        .WithMany("ChildContainers")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Redi.Domain.Aggregates.ContainerAggregate.Entities.StakerMembership", b =>
                {
                    b.HasOne("Redi.Domain.Aggregates.ContainerAggregate.Container", null)
                        .WithMany("Memberships")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Redi.Domain.Aggregates.ContainerAggregate.Container", b =>
                {
                    b.Navigation("ChildContainers");

                    b.Navigation("Memberships");
                });
#pragma warning restore 612, 618
        }
    }
}
